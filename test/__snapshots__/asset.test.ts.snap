// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resource created 1`] = `
Object {
  "Mappings": Object {
    "AWSCloudFrontPartitionHostedZoneIdMap": Object {
      "aws": Object {
        "zoneId": "Z2FDTNDATAQYW2",
      },
      "aws-cn": Object {
        "zoneId": "Z3RFFRIM2A3IF5",
      },
    },
  },
  "Parameters": Object {
    "[HASH REMOVED]": Object {
      "Description": "[HASH REMOVED]",
      "Type": "String",
    },
    "[HASH REMOVED]": Object {
      "Description": "[HASH REMOVED]",
      "Type": "String",
    },
    "[HASH REMOVED]": Object {
      "Description": "[HASH REMOVED]",
      "Type": "String",
    },
    "[HASH REMOVED]": Object {
      "Description": "[HASH REMOVED]",
      "Type": "String",
    },
    "[HASH REMOVED]": Object {
      "Description": "[HASH REMOVED]",
      "Type": "String",
    },
    "[HASH REMOVED]": Object {
      "Description": "[HASH REMOVED]",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AssetBucket1D025086": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AccessControl": "Private",
        "BucketName": "kaleido-backend-asset-test",
        "CorsConfiguration": Object {
          "CorsRules": Array [
            Object {
              "AllowedHeaders": Array [
                "*",
              ],
              "AllowedMethods": Array [
                "GET",
                "HEAD",
              ],
              "AllowedOrigins": Array [
                "*",
              ],
              "ExposedHeaders": Array [
                "x-amz-server-side-encryption",
                "x-amz-request-id",
                "x-amz-id-2",
                "ETag",
              ],
              "MaxAge": 3000,
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "AssetBucketAllowBucketNotificationsTotestupdateimageDC702C469107DC86": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "updateimageC5C57F5D",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "AssetBucket1D025086",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AssetBucketAutoDeleteObjectsCustomResource5FFEAE83": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "AssetBucketPolicy6A11ED41",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "AssetBucket1D025086",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "AssetBucketNotifications2EBB64E6": Object {
      "DependsOn": Array [
        "AssetBucketAllowBucketNotificationsTotestupdateimageDC702C469107DC86",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "AssetBucket1D025086",
        },
        "Managed": true,
        "NotificationConfiguration": Object {
          "LambdaFunctionConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "LambdaFunctionArn": Object {
                "Fn::GetAtt": Array [
                  "updateimageC5C57F5D",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "AssetBucketPolicy6A11ED41": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "AssetBucket1D025086",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "AssetBucket1D025086",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "AssetBucket1D025086",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "CanonicalUser": Object {
                  "Fn::GetAtt": Array [
                    "OAIAssetsBucket050BA614",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "AssetBucket1D025086",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "AssetCDNArecord9711F9DD": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::GetAtt": Array [
              "AssetDistributionCFDistributionB1B52E0D",
              "DomainName",
            ],
          },
          "HostedZoneId": Object {
            "Fn::FindInMap": Array [
              "AWSCloudFrontPartitionHostedZoneIdMap",
              Object {
                "Ref": "AWS::Partition",
              },
              "zoneId",
            ],
          },
        },
        "HostedZoneId": Object {
          "Fn::ImportValue": "r53:ExportsOutputRefHostedZoneDB99F8662BBAE844",
        },
        "Name": "assets.test.example.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "AssetDistributionCFDistributionB1B52E0D": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "Aliases": Array [
            "assets.test.example.com",
          ],
          "DefaultCacheBehavior": Object {
            "AllowedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
            ],
            "CachedMethods": Array [
              "GET",
              "HEAD",
            ],
            "Compress": true,
            "DefaultTTL": 31536000,
            "ForwardedValues": Object {
              "Cookies": Object {
                "Forward": "none",
              },
              "QueryString": false,
            },
            "MaxTTL": 31536000,
            "MinTTL": 31536000,
            "TargetOriginId": "origin1",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": Array [
            Object {
              "ConnectionAttempts": 3,
              "ConnectionTimeout": 10,
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "AssetBucket1D025086",
                  "RegionalDomainName",
                ],
              },
              "Id": "origin1",
              "S3OriginConfig": Object {
                "OriginAccessIdentity": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "origin-access-identity/cloudfront/",
                      Object {
                        "Ref": "OAIAssetsBucket050BA614",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "PriceClass": "PriceClass_All",
          "ViewerCertificate": Object {
            "AcmCertificateArn": Object {
              "Fn::ImportValue": "cert:ExportsOutputFnGetAttCertificateCertificateRequestorResource2890C6B7Arn29E196AE",
            },
            "MinimumProtocolVersion": "TLSv1",
            "SslSupportMethod": "sni-only",
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "DependsOn": Array [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
    response_status = "SUCCESS"
    error_message = ""
    try:
        props = event["ResourceProperties"]
        bucket = props["BucketName"]
        notification_configuration = props["NotificationConfiguration"]
        request_type = event["RequestType"]
        managed = props.get('Managed', 'true').lower() == 'true'
        stack_id = event['StackId']

        if managed:
          config = handle_managed(request_type, notification_configuration)
        else:
          config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

        put_bucket_notification_configuration(bucket, config)
    except Exception as e:
        logging.exception("Failed to put bucket notification configuration")
        response_status = "FAILED"
        error_message = f"Error: {str(e)}. "
    finally:
        submit_response(event, context, response_status, error_message)


def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration


def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):

  # find external notifications
  external_notifications = find_external_notifications(bucket, stack_id)

  # if delete, that's all we need
  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
    return notification

  # otherwise, merge external with incoming config and augment with id
  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming
  return notifications


def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    # if the notification was created by us, we know what id to expect
    # so we can filter by it.
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

  return external_notifications


def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)


def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)


def submit_response(event: dict, context, response_status: str, error_message: str):
    response_body = json.dumps(
        {
            "Status": response_status,
            "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
            "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
            "StackId": event["StackId"],
            "RequestId": event["RequestId"],
            "LogicalResourceId": event["LogicalResourceId"],
            "NoEcho": False,
        }
    ).encode("utf-8")
    headers = {"content-type": "", "content-length": str(len(response_body))}
    try:
        req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
        with urllib.request.urlopen(req) as response:
            print(response.read().decode("utf-8"))
        print("Status code: " + response.reason)
    except Exception as e:
        print("send(..) failed executing request.urlopen(..): " + str(e))
",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.7",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": Object {
      "DependsOn": Array [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "[HASH REMOVED]",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "[HASH REMOVED]",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "[HASH REMOVED]",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Lambda function for auto-deleting objects in ",
              Object {
                "Ref": "AssetBucket1D025086",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OAIAssetsBucket050BA614": Object {
      "Properties": Object {
        "CloudFrontOriginAccessIdentityConfig": Object {
          "Comment": "Allows CloudFront to reach the bucket",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "updateimageC5C57F5D": Object {
      "DependsOn": Array [
        "updateimageServiceRoleDefaultPolicy88CE8FEB",
        "updateimageServiceRoleB68B1268",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "[HASH REMOVED]",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "[HASH REMOVED]",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "[HASH REMOVED]",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AllowedOrigin": "http://localhost:3001",
            "ApplicationCreatedTopicName": "kaleido-backend-media-application-created-test",
            "AssetDistributionId": Object {
              "Ref": "AssetDistributionCFDistributionB1B52E0D",
            },
            "EnvironmentId": "test",
          },
        },
        "FunctionName": "kaleido-backend-updateimage-test",
        "Handler": "bin/main",
        "Role": Object {
          "Fn::GetAtt": Array [
            "updateimageServiceRoleB68B1268",
            "Arn",
          ],
        },
        "Runtime": "go1.x",
        "Timeout": 60,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "updateimageServiceRoleB68B1268": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "updateimageServiceRoleDefaultPolicy88CE8FEB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "lambda:*",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "ssm:Get*",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "dynamodb:*",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "cloudfront:CreateInvalidation",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:aws:cloudfront::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":distribution/",
                      Object {
                        "Ref": "AssetDistributionCFDistributionB1B52E0D",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:aws:cloudfront::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":distribution/",
                      Object {
                        "Ref": "AssetDistributionCFDistributionB1B52E0D",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "updateimageServiceRoleDefaultPolicy88CE8FEB",
        "Roles": Array [
          Object {
            "Ref": "updateimageServiceRoleB68B1268",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
